class Solution {
public:
    
    int getans(vector<int>&count,vector<int>&nodeval)
    {
        int ans=-1;
        
        map<int,int>m;
        for(int i=0;i<count.size();i++)
        {
            if(count[i]==1)
                m[nodeval[i]]++;
        }
        
        int sum=INT_MIN;
        for(auto i:m)
            if(i.second>sum)
            {
                sum=i.second;
                ans=i.first;
            }
        else if(i.second==sum)
        {
            ans=min(ans,i.first);
        }
            
        
        return ans;
    }
    void fillit(vector<vector<int>>&arr,int par,vector<int>&count,vector<int>&nodeval,int node,vector<int>&vis)
    {
        int n=arr.size();
        
        for(auto i:arr[node])
        {
            if(vis[i]==0)
            { 
                vis[i]=1;
                count[i]++;
                nodeval[i]=par;
                fillit(arr,par,count,nodeval,i,vis);
            }
        }
    }
    int minMalwareSpread(vector<vector<int>>& e, vector<int>& initial) {
     int n=e.size();
        vector<vector<int>>arr(n);
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            { 
                if(i==j)
                    continue;
                if(e[i][j]==1)
                arr[i].push_back(j); 
            }
        }
        
        vector<int>count(n,0); // this is the count of the node
        vector<int>nodeval(n,0); // this is the values of the node
        
        for(int i=0;i<initial.size();i++)
        {
            
            vector<int>vis(n,0);
           int node=initial[i];
            vis[node]=1;
            count[node]++;
            nodeval[node]=node;
            fillit(arr,node,count,nodeval,node,vis);
        } 
        int final_ans=getans(count,nodeval);
        sort(initial.begin(),initial.end());
         if(final_ans==-1)
             return initial[0];
        else
        return  final_ans;
    }
};